#!/bin/bash

# DNS module - All DNS-related functionality
# Part of Enhanced Web Audit Script v2.1

# Source core module
source "$(dirname "${BASH_SOURCE[0]}")/core.sh"

# Enhanced dig query with multiple fallback methods
perform_dig_query() {
    local domain="$1"
    local record_type="${2:-A}"
    local dns_server="${3:-}"
    local result=""
    
    if ! command -v dig >/dev/null 2>&1; then
        log_debug "dig not available, using fallback methods"
        return 1
    fi
    
    # Build dig command
    local dig_cmd="dig"
    [[ -n "$dns_server" ]] && dig_cmd="$dig_cmd @$dns_server"
    dig_cmd="$dig_cmd +short +time=3 +tries=2 $domain $record_type"
    
    # Execute with timeout
    result=$(timeout "$TIMEOUT_DNS" $dig_cmd 2>/dev/null)
    
    if [[ $? -eq 0 && -n "$result" ]]; then
        echo "$result"
        return 0
    fi
    
    return 1
}

# Robust DNS resolution with multiple methods
resolve_domain() {
    local domain="$1"
    local ip=""
    local method=""
    
    # Method 1: dig (preferred)
    if command -v dig >/dev/null 2>&1; then
        ip=$(perform_dig_query "$domain" "A" | head -1)
        if [[ -n "$ip" && "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            method="dig (enhanced)"
        else
            # Fallback to traditional dig
            ip=$(timeout "$TIMEOUT_DNS" dig +short +time=3 +tries=2 "$domain" A 2>/dev/null | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
            if [[ -n "$ip" ]]; then
                method="dig (traditional)"
            fi
        fi
    fi
    
    # Method 2: nslookup (fallback)
    if [[ -z "$ip" ]] && command -v nslookup >/dev/null 2>&1; then
        ip=$(timeout "$TIMEOUT_DNS" nslookup "$domain" 2>/dev/null | awk '/^Address: / { print $2 }' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
        [[ -n "$ip" ]] && method="nslookup"
    fi
    
    # Method 3: host (fallback)
    if [[ -z "$ip" ]] && command -v host >/dev/null 2>&1; then
        ip=$(timeout "$TIMEOUT_DNS" host "$domain" 2>/dev/null | awk '/has address/ { print $4 }' | head -1)
        [[ -n "$ip" ]] && method="host"
    fi
    
    # Method 4: getent (system resolver)
    if [[ -z "$ip" ]] && command -v getent >/dev/null 2>&1; then
        ip=$(timeout "$TIMEOUT_DNS" getent hosts "$domain" 2>/dev/null | awk '{ print $1 }' | head -1)
        [[ -n "$ip" ]] && method="getent"
    fi
    
    if [[ -n "$ip" ]]; then
        log_debug "Resolved $domain to $ip using $method"
        echo "$ip"
        return 0
    else
        log_debug "Failed to resolve $domain using all methods"
        return 1
    fi
}

# Parallel DNS information gathering
get_dns_info_parallel() {
    local domain="$1"
    local temp_dir="/tmp/dns_parallel_$$"
    
    echo -e "${GREEN}== DNS Information (Parallel) ==${NC}"
    
    # Create temporary directory
    mkdir -p "$temp_dir"
    
    # Run parallel queries
    {
        show_progress 1 6 "Querying A records..."
        perform_dig_query "$domain" "A" > "$temp_dir/a_records" &
        show_progress 2 6 "Querying A records..."
        perform_dig_query "$domain" "AAAA" > "$temp_dir/aaaa_records" &
        show_progress 3 6 "Querying AAAA records..."
        perform_dig_query "$domain" "MX" > "$temp_dir/mx_records" &
        show_progress 4 6 "Querying MX records..."
        perform_dig_query "$domain" "NS" > "$temp_dir/ns_records" &
        show_progress 5 6 "Querying NS records..."
        perform_dig_query "$domain" "TXT" > "$temp_dir/txt_records" &
        show_progress 6 6 "Querying TXT records..."
        wait
    }
    
    # Display results
    echo
    echo "A records:"
    if [[ -s "$temp_dir/a_records" ]]; then
        cat "$temp_dir/a_records"
    else
        echo "No A records found"
    fi
    echo
    
    echo "AAAA records (IPv6):"
    if [[ -s "$temp_dir/aaaa_records" ]]; then
        cat "$temp_dir/aaaa_records"
    else
        echo "No AAAA records found"
    fi
    echo
    
    echo "MX records:"
    if [[ -s "$temp_dir/mx_records" ]]; then
        cat "$temp_dir/mx_records"
        MX_RECORDS=$(cat "$temp_dir/mx_records" | tr '\n' ' ')
    else
        echo "No MX records found"
        MX_RECORDS=""
    fi
    echo
    
    echo "NS records:"
    if [[ -s "$temp_dir/ns_records" ]]; then
        cat "$temp_dir/ns_records"
        NS_RECORDS=$(cat "$temp_dir/ns_records" | tr '\n' ' ')
    else
        echo "No NS records found"
        NS_RECORDS=""
    fi
    echo
    
    echo "TXT records:"
    if [[ -s "$temp_dir/txt_records" ]]; then
        cat "$temp_dir/txt_records"
        TXT_RECORDS=$(cat "$temp_dir/txt_records" | tr '\n' ' ')
    else
        echo "No TXT records found"
        TXT_RECORDS=""
    fi
    echo
}

# Global DNS servers for propagation testing with geographic information
declare -a GLOBAL_DNS_SERVERS=(
    "8.8.8.8:Google_Primary:🇺🇸_USA_Mountain_View"
    "8.8.4.4:Google_Secondary:🇺🇸_USA_Mountain_View"
    "1.1.1.1:Cloudflare_Primary:🌍_Global_Anycast"
    "1.0.0.1:Cloudflare_Secondary:🌍_Global_Anycast"
    "9.9.9.9:Quad9_Primary:🇺🇸_USA_Berkeley"
    "149.112.112.112:Quad9_Secondary:🇨🇭_Switzerland_Zurich"
    "208.67.222.222:OpenDNS_Primary:🇺🇸_USA_San_Francisco"
    "208.67.220.220:OpenDNS_Secondary:🇺🇸_USA_San_Francisco"
    "4.2.2.1:Level3_Primary:🇺🇸_USA_Colorado"
    "4.2.2.2:Level3_Secondary:🇺🇸_USA_Colorado"
    "77.88.8.8:Yandex_Primary:🇷🇺_Russia_Moscow"
    "77.88.8.1:Yandex_Secondary:🇷🇺_Russia_Moscow"
    "180.76.76.76:Baidu_Primary:🇨🇳_China_Beijing"
    "114.114.114.114:114DNS_Primary:🇨🇳_China_Nanjing"
    "8.26.56.26:Comodo_Primary:🇺🇸_USA_New_Jersey"
    "185.228.168.9:CleanBrowsing_Primary:🇺🇸_USA_Security"
)

# Check DNS propagation across global servers
check_dns_propagation() {
    local domain="$1"
    local record_type="${2:-A}"
    local expected_value="${3:-}"
    local consistency_count=0
    local total_servers=${#GLOBAL_DNS_SERVERS[@]}
    local results_file="/tmp/dns_propagation_$$"
    
    echo -e "${CYAN}== DNS Propagation Check ==${NC}"
    echo "Testing $record_type record for: $domain"
    [[ -n "$expected_value" ]] && echo "Expected value: $expected_value"
    echo "Checking against $total_servers global DNS servers across multiple regions..."
    echo
    
    # Clear results file
    > "$results_file"
    
    # Test each DNS server
    for server_info in "${GLOBAL_DNS_SERVERS[@]}"; do
        IFS=':' read -r server_ip server_name server_location <<< "$server_info"
        
        # Format the display with location info
        local display_name="${server_name/_/ }"
        local location_display="${server_location//_/ }"
        
        printf "%-25s [%15s] %s: " "$display_name" "$server_ip" "$location_display"
        
        # Query with timeout
        local result=$(timeout 5 dig +short +time=2 +tries=1 @"$server_ip" "$domain" "$record_type" 2>/dev/null | head -1)
        
        if [[ -n "$result" && ! "$result" =~ ^";;" ]]; then
            echo -e "${GREEN}$result${NC}"
            echo "$server_name:$server_ip:$result:$server_location" >> "$results_file"
            
            # Check consistency if expected value provided
            if [[ -n "$expected_value" && "$result" == "$expected_value" ]]; then
                ((consistency_count++))
            fi
        else
            echo -e "${RED}NO RESPONSE${NC}"
            echo "$server_name:$server_ip:TIMEOUT:$server_location" >> "$results_file"
        fi
    done
    
    echo
    
    # Analyze propagation status
    local responding_servers=$(grep -v "TIMEOUT" "$results_file" | wc -l)
    local timeout_servers=$(grep "TIMEOUT" "$results_file" | wc -l)
    local unique_values=$(grep -v "TIMEOUT" "$results_file" | cut -d':' -f3 | sort | uniq | wc -l)
    
    echo -e "${YELLOW}== Propagation Analysis ==${NC}"
    echo "Responding servers: $responding_servers/$total_servers"
    [[ $timeout_servers -gt 0 ]] && echo "Non-responding servers: $timeout_servers/$total_servers"
    echo "Unique values found: $unique_values"
    
    if [[ -n "$expected_value" ]]; then
        local consistency_percentage=$((consistency_count * 100 / total_servers))
        echo "Consistency with expected value: $consistency_count/$total_servers ($consistency_percentage%)"
        
        if [[ $consistency_percentage -ge 90 ]]; then
            echo -e "Propagation status: ${GREEN}FULLY PROPAGATED${NC}"
        elif [[ $consistency_percentage -ge 70 ]]; then
            echo -e "Propagation status: ${YELLOW}MOSTLY PROPAGATED${NC}"
        elif [[ $consistency_percentage -ge 30 ]]; then
            echo -e "Propagation status: ${YELLOW}PARTIALLY PROPAGATED${NC}"
        else
            echo -e "Propagation status: ${RED}NOT PROPAGATED${NC}"
        fi
    else
        if [[ $unique_values -eq 1 ]]; then
            echo -e "Propagation status: ${GREEN}CONSISTENT${NC}"
        elif [[ $unique_values -le 3 ]]; then
            echo -e "Propagation status: ${YELLOW}MOSTLY CONSISTENT${NC}"
        else
            echo -e "Propagation status: ${RED}INCONSISTENT${NC}"
        fi
    fi
    
    # Show value distribution
    if [[ $responding_servers -gt 0 ]]; then
        echo
        echo "Value distribution:"
        grep -v "TIMEOUT" "$results_file" | cut -d':' -f3 | sort | uniq -c | while read count value; do
            local percentage=$((count * 100 / responding_servers))
            echo "  $value: $count servers ($percentage%)"
        done
        
        echo
        echo "Geographic distribution:"
        grep -v "TIMEOUT" "$results_file" | while IFS=':' read -r server_name server_ip result location; do
            local clean_location="${location//_/ }"
            echo "  $clean_location: $result"
        done
        
        # Show timeout locations separately
        local timeout_count=$(grep "TIMEOUT" "$results_file" | wc -l)
        if [[ $timeout_count -gt 0 ]]; then
            echo
            echo "Non-responding regions:"
            grep "TIMEOUT" "$results_file" | while IFS=':' read -r server_name server_ip result location; do
                local clean_location="${location//_/ }"
                echo "  $clean_location: TIMEOUT"
            done
        fi
    fi
    
    # Cleanup
    rm -f "$results_file"
    echo
}

# Quick DNS propagation check (fewer servers for speed)
quick_dns_propagation() {
    local domain="$1"
    local record_type="${2:-A}"
    
    echo -n "DNS Propagation (Global): "
    
    # Test key DNS servers from different regions
    local servers=("8.8.8.8:🇺🇸_USA" "1.1.1.1:🌍_Global" "77.88.8.8:🇷🇺_Russia" "114.114.114.114:🇨🇳_China")
    local results=()
    local consistent=true
    local first_result=""
    
    for server_info in "${servers[@]}"; do
        IFS=':' read -r server location <<< "$server_info"
        local result=$(timeout 3 dig +short +time=1 +tries=1 @"$server" "$domain" "$record_type" 2>/dev/null | head -1)
        if [[ -n "$result" ]]; then
            results+=("$result")
            if [[ -z "$first_result" ]]; then
                first_result="$result"
            elif [[ "$result" != "$first_result" ]]; then
                consistent=false
            fi
        fi
    done
    
    if [[ ${#results[@]} -eq 0 ]]; then
        echo -e "${RED}No responses from global servers${NC}"
    elif [[ $consistent == true && ${#results[@]} -eq ${#servers[@]} ]]; then
        echo -e "${GREEN}Fully propagated globally${NC} ($first_result)"
    elif [[ ${#results[@]} -ge 2 ]]; then
        echo -e "${YELLOW}Partially propagated${NC} (${#results[@]}/${#servers[@]} regions responding)"
    else
        echo -e "${RED}Not propagated${NC} (${#results[@]}/${#servers[@]} regions responding)"
    fi
}

# DNS change monitoring
monitor_dns_changes() {
    local domain="$1"
    local record_type="${2:-A}"
    local interval="${3:-60}"
    local max_checks="${4:-10}"
    
    echo -e "${CYAN}== DNS Change Monitor ==${NC}"
    echo "Monitoring $record_type record for: $domain"
    echo "Check interval: ${interval}s, Max checks: $max_checks"
    echo "Press Ctrl+C to stop monitoring"
    echo
    
    local check_count=0
    local previous_result=""
    
    while [[ $check_count -lt $max_checks ]]; do
        ((check_count++))
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        
        echo -n "[$timestamp] Check $check_count/$max_checks: "
        
        # Get current result from primary DNS
        local current_result=$(perform_dig_query "$domain" "$record_type" | head -1)
        
        if [[ -n "$current_result" ]]; then
            if [[ "$current_result" != "$previous_result" ]]; then
                if [[ -n "$previous_result" ]]; then
                    echo -e "${YELLOW}CHANGED${NC}: $previous_result → $current_result"
                    
                    # Check propagation when change detected
                    echo "Change detected! Checking propagation..."
                    quick_dns_propagation "$domain" "$record_type"
                else
                    echo -e "${GREEN}INITIAL${NC}: $current_result"
                fi
                previous_result="$current_result"
            else
                echo -e "${GREEN}STABLE${NC}: $current_result"
            fi
        else
            echo -e "${RED}NO RESPONSE${NC}"
        fi
        
        # Wait before next check (unless it's the last one)
        if [[ $check_count -lt $max_checks ]]; then
            sleep "$interval"
        fi
    done
    
    echo
    echo "DNS monitoring completed."
}

# Get comprehensive domain information
get_domain_info() {
    local domain="$1"
    
    echo "Domain: $domain"
    
    # Basic DNS info
    echo -n "IP Address: "
    local ip=$(resolve_domain "$domain")
    if [[ -n "$ip" ]]; then
        echo "$ip"
    else
        echo "Could not resolve"
    fi
    
    # Domain registration info (WHOIS)
    echo -n "WHOIS Info: "
    if command -v whois >/dev/null 2>&1; then
        local whois_info=$(timeout 10 whois "$domain" 2>/dev/null)
        if [[ -n "$whois_info" ]]; then
            echo "Available"
            
            # Extract key information
            local registrar=$(echo "$whois_info" | grep -i "registrar:" | head -1 | cut -d: -f2- | sed 's/^[[:space:]]*//')
            local creation_date=$(echo "$whois_info" | grep -iE "(creation date|created|registered):" | head -1 | cut -d: -f2- | sed 's/^[[:space:]]*//')
            local expiry_date=$(echo "$whois_info" | grep -iE "(expir|expiration).*date:" | head -1 | cut -d: -f2- | sed 's/^[[:space:]]*//')
            
            [[ -n "$registrar" ]] && echo "  Registrar: $registrar"
            [[ -n "$creation_date" ]] && echo "  Created: $creation_date"
            [[ -n "$expiry_date" ]] && echo "  Expires: $expiry_date"
        else
            echo "Not available"
        fi
    else
        echo "whois not available"
    fi
    
    # Domain age estimation
    echo -n "Domain Age: "
    if command -v whois >/dev/null 2>&1; then
        local whois_output=$(timeout 5 whois "$domain" 2>/dev/null)
        local creation_date=$(echo "$whois_output" | grep -iE "(creation date|created|registered):" | head -1 | cut -d: -f2- | sed 's/^[[:space:]]*//' | cut -d' ' -f1)
        
        if [[ -n "$creation_date" ]]; then
            # Try to calculate age (basic estimation)
            local current_year=$(date +%Y)
            local creation_year=$(echo "$creation_date" | cut -d'-' -f1)
            
            if [[ "$creation_year" =~ ^[0-9]{4}$ ]]; then
                local age=$((current_year - creation_year))
                echo "~$age years"
            else
                echo "Unknown format"
            fi
        else
            echo "Unable to determine"
        fi
    else
        echo "whois not available"
    fi
    
    # Name servers
    echo -n "Name Servers: "
    local ns_records=$(perform_dig_query "$domain" "NS" | head -3)
    if [[ -n "$ns_records" ]]; then
        echo
        echo "$ns_records" | while read -r ns; do
            [[ -n "$ns" ]] && echo "  $ns"
        done
    else
        echo "Could not retrieve"
    fi
}

# DNS diagnostic function
dns_diagnostic() {
    local domain="$1"
    
    echo -e "${YELLOW}== DNS Diagnostic Mode ==${NC}"
    echo "Running comprehensive DNS tests for $domain..."
    echo
    
    # Test 1: Basic connectivity to domain
    echo -n "1. Basic dig A record: "
    local test1=$(perform_dig_query "$domain" "A")
    if [[ -n "$test1" ]]; then
        echo -e "${GREEN}SUCCESS${NC} - $test1"
    else
        echo -e "${RED}FAILED${NC}"
    fi
    
    # Test 2: SOA record
    echo -n "2. SOA record query: "
    local test2=$(perform_dig_query "$domain" "SOA")
    if [[ -n "$test2" ]]; then
        echo -e "${GREEN}SUCCESS${NC}"
        echo "   SOA: $test2"
    else
        echo -e "${RED}FAILED${NC}"
    fi
    
    # Test 3: Multiple DNS servers
    echo "3. Testing multiple DNS servers:"
    local dns_servers=("8.8.8.8" "1.1.1.1" "9.9.9.9")
    for server in "${dns_servers[@]}"; do
        echo -n "   $server: "
        local result=$(perform_dig_query "$domain" "A" "$server")
        if [[ -n "$result" ]]; then
            echo -e "${GREEN}$result${NC}"
        else
            echo -e "${RED}FAILED${NC}"
        fi
    done
    
    echo
}
